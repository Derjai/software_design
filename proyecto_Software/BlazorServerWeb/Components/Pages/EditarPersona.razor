@page "/EditarPersona/{id}"
@using BlazorServerWeb.Services
@using BlazorServerWeb.Models
@inject PersonaService PersonaService
@inject LogService LogService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>EditarPersona</h3>
@if (persona != null)
{
    <form>
        <div class="form-group">
            <label for="TipoDocumento">Tipo de Documento:</label>
            <select id="TipoDocumento" @onchange="@(e => persona.TipoDocumento = e.Value.ToString())" value="@persona.TipoDocumento">
                <option value="Cedula">Cédula</option>
                <option value="TarjetaIdentidad">Tarjeta de Identidad</option>
            </select>
        </div>

        <div class="form-group">
            <label for="NumDoc">Número de Documento:</label>
            <input id="NumDoc" @onchange="@(e => persona.NumDoc = e.Value.ToString())" value="@persona.NumDoc" />
        </div>

        <div class="form-group">
            <label for="Nombre">Nombre:</label>
            <input id="Nombre" @onchange="@(e => persona.Nombre = e.Value.ToString())" value="@persona.Nombre" />
        </div>

        <div class="form-group">
            <label for="SegundoNombre">Segundo Nombre:</label>
            <input id="SegundoNombre" @onchange="@(e => persona.SegundoNombre = e.Value.ToString())" value="@persona.SegundoNombre" />
        </div>

        <div class="form-group">
            <label for="Apellidos">Apellidos:</label>
            <input id="Apellidos" @onchange="@(e => persona.Apellidos = e.Value.ToString())" value="@persona.Apellidos" />
        </div>

        <div class="form-group">
            <label for="FechaNacimiento">Fecha de Nacimiento:</label>
            <input type="date" input id="FechaNacimiento" @onchange="@(e => persona.FechaNacimiento = DateTime.Parse(e.Value.ToString()))"  />
        </div>

        <div class="form-group">
            <label for="Genero">Género:</label>
            <select id="Genero" @onchange="@(e => persona.Genero = e.Value.ToString())" value="@persona.Genero">
                <option value="Masculino">Masculino</option>
                <option value="Femenino">Femenino</option>
                <option value="No Binario">No Binario</option>
                <option value="Prefiero no especificar">Prefiero no especificar</option>
            </select>
        </div>

        <div class="form-group">
            <label for="CorreoElectronico">Correo Electrónico:</label>
            <input type="email"  input id="CorreoElectronico" @onchange="@(e => persona.CorreoElectronico = e.Value.ToString())" value="@persona.CorreoElectronico" />
        </div>

        <div class="form-group">
            <label for="Celular">Celular:</label>
            <input id="Celular" @onchange="@(e => persona.Celular = e.Value.ToString())" value="@persona.Celular" />
        </div>

        <div class="form-group">
            <label for="Foto">Foto:</label>
            <input type="file" input id="Foto" @onchange="OnInputFileChange" value="@persona.Foto"/>
        </div>
        <NavLink class="btn btn-info" href="@($"/CambiosPersona/{persona.NumDoc}")">Enviar Cambios</NavLink>
    </form>
}
else
{
    <p>No se encontró la persona.</p>
}
@if (errorMessage != null)
{
    <p>@errorMessage</p>
}
@code {
    private string errorMessage;
    [Parameter] public string id { get; set; }
    private BlazorServerWeb.Models.PersonaViewModel persona { get; set; }
    private BlazorServerWeb.Models.Persona person { get; set; }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            person = await PersonaService.GetPersonaAsync(id);
            persona = new BlazorServerWeb.Models.PersonaViewModel
                {
                    TipoDocumento = person.Tipo_Doc,
                    NumDoc = person.Num_Doc,
                    Nombre = person.Nombre,
                    SegundoNombre = person.Seg_Nombre,
                    Apellidos = person.Apellidos,
                    FechaNacimiento = person.Fecha_Nacimiento,
                    Genero = person.Genero,
                    CorreoElectronico = person.Correo,
                    Celular = person.Celular,
                    Foto = person.Foto
                };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar persona: {ex.Message}");
        }
    }
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            using (var memoryStream = new MemoryStream())
            {
                await file.OpenReadStream().CopyToAsync(memoryStream);
                persona.Foto = memoryStream.ToArray();
            }
        }
        else
        {
            persona.Foto = null;
        }
    }
    private async Task OnInputFileChange(ChangeEventArgs e)
    {
        var inputFileElement = (ElementReference)e.Value;
        var uploadedFileAsBytes = await JSRuntime.InvokeAsync<byte[]>("readUploadedFileAsBytes", inputFileElement);
        persona.Foto = uploadedFileAsBytes;
    }
    private async Task OnEditarPersona(BlazorServerWeb.Models.PersonaViewModel persona)
    {      
        var per = new BlazorServerWeb.Models.Persona
            {
                Tipo_Doc = persona.TipoDocumento,
                Num_Doc = persona.NumDoc,
                Nombre = persona.Nombre,
                Seg_Nombre = persona.SegundoNombre,
                Apellidos = persona.Apellidos,
                Fecha_Nacimiento = persona.FechaNacimiento,
                Genero = persona.Genero,
                Correo = persona.CorreoElectronico,
                Celular = persona.Celular,
                Foto = persona.Foto
            };
        Console.WriteLine($"Actualizando persona: {per.Nombre}, {per.Apellidos}");
        try
        {
            await PersonaService.UpdatePersonaAsync(per);
            Console.WriteLine("Persona actualizada con éxito");
            var transaccion = new BlazorServerWeb.Models.Log { Tipo_Transaccion = "Actualizar", Fecha = DateTime.Now, Num_Doc = per.Num_Doc };
            await LogService.AddLogAsync(transaccion);
            errorMessage = null;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener personas: {ex.Message}");
            errorMessage = "Error al enviar el registro a la base de datos. Servidor caído.";
        }
    }
}
